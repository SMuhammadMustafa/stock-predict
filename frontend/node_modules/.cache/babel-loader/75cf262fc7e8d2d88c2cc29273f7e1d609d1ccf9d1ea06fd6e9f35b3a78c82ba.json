{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studies\\\\FYP\\\\Frontend\\\\fyp\\\\src\\\\components\\\\MarketSentiment.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MarketSentiment = () => {\n  _s();\n  const [sentimentData, setSentimentData] = useState([]);\n  useEffect(() => {\n    // Simulated demo data for market sentiment\n    const demoSentimentData = [{\n      timestamp: '2024-10-01',\n      sentiment: 20\n    }, {\n      timestamp: '2024-10-02',\n      sentiment: 40\n    }, {\n      timestamp: '2024-10-03',\n      sentiment: 60\n    }, {\n      timestamp: '2024-10-04',\n      sentiment: 80\n    }, {\n      timestamp: '2024-10-05',\n      sentiment: 100\n    }];\n    setSentimentData(demoSentimentData);\n  }, []);\n\n  // Color function to determine bar color based on sentiment\n  const getColor = sentiment => {\n    if (sentiment <= 30) return '#ff4d4d'; // Red\n    if (sentiment <= 70) return '#ffcc00'; // Yellow\n    return '#33cc33'; // Green\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Market Sentiment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        data: sentimentData,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"timestamp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          domain: [0, 100]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"sentiment\",\n          fill: getColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(MarketSentiment, \"6S6XNd8y+dKq+CflC7O0ROsavlQ=\");\n_c = MarketSentiment;\nexport default MarketSentiment;\nvar _c;\n$RefreshReg$(_c, \"MarketSentiment\");","map":{"version":3,"names":["React","useEffect","useState","BarChart","Bar","XAxis","YAxis","Tooltip","CartesianGrid","ResponsiveContainer","jsxDEV","_jsxDEV","MarketSentiment","_s","sentimentData","setSentimentData","demoSentimentData","timestamp","sentiment","getColor","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","data","strokeDasharray","dataKey","domain","fill","_c","$RefreshReg$"],"sources":["D:/Studies/FYP/Frontend/fyp/src/components/MarketSentiment.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';\r\n\r\nconst MarketSentiment = () => {\r\n  const [sentimentData, setSentimentData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Simulated demo data for market sentiment\r\n    const demoSentimentData = [\r\n      { timestamp: '2024-10-01', sentiment: 20 },\r\n      { timestamp: '2024-10-02', sentiment: 40 },\r\n      { timestamp: '2024-10-03', sentiment: 60 },\r\n      { timestamp: '2024-10-04', sentiment: 80 },\r\n      { timestamp: '2024-10-05', sentiment: 100 },\r\n    ];\r\n\r\n    setSentimentData(demoSentimentData);\r\n  }, []);\r\n\r\n  // Color function to determine bar color based on sentiment\r\n  const getColor = (sentiment) => {\r\n    if (sentiment <= 30) return '#ff4d4d'; // Red\r\n    if (sentiment <= 70) return '#ffcc00'; // Yellow\r\n    return '#33cc33'; // Green\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Market Sentiment</h2>\r\n\r\n      {/* Bar chart for sentiment */}\r\n      <ResponsiveContainer width=\"100%\" height={400}>\r\n        <BarChart data={sentimentData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"timestamp\" />\r\n          <YAxis domain={[0, 100]} />\r\n          <Tooltip />\r\n          <Bar dataKey=\"sentiment\" fill={getColor} />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarketSentiment;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,aAAa,EAAEC,mBAAmB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpG,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,iBAAiB,GAAG,CACxB;MAAEC,SAAS,EAAE,YAAY;MAAEC,SAAS,EAAE;IAAG,CAAC,EAC1C;MAAED,SAAS,EAAE,YAAY;MAAEC,SAAS,EAAE;IAAG,CAAC,EAC1C;MAAED,SAAS,EAAE,YAAY;MAAEC,SAAS,EAAE;IAAG,CAAC,EAC1C;MAAED,SAAS,EAAE,YAAY;MAAEC,SAAS,EAAE;IAAG,CAAC,EAC1C;MAAED,SAAS,EAAE,YAAY;MAAEC,SAAS,EAAE;IAAI,CAAC,CAC5C;IAEDH,gBAAgB,CAACC,iBAAiB,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,QAAQ,GAAID,SAAS,IAAK;IAC9B,IAAIA,SAAS,IAAI,EAAE,EAAE,OAAO,SAAS,CAAC,CAAC;IACvC,IAAIA,SAAS,IAAI,EAAE,EAAE,OAAO,SAAS,CAAC,CAAC;IACvC,OAAO,SAAS,CAAC,CAAC;EACpB,CAAC;EAED,oBACEP,OAAA;IAAAS,QAAA,gBACET,OAAA;MAAAS,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGzBb,OAAA,CAACF,mBAAmB;MAACgB,KAAK,EAAC,MAAM;MAACC,MAAM,EAAE,GAAI;MAAAN,QAAA,eAC5CT,OAAA,CAACR,QAAQ;QAACwB,IAAI,EAAEb,aAAc;QAAAM,QAAA,gBAC5BT,OAAA,CAACH,aAAa;UAACoB,eAAe,EAAC;QAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvCb,OAAA,CAACN,KAAK;UAACwB,OAAO,EAAC;QAAW;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC7Bb,OAAA,CAACL,KAAK;UAACwB,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC3Bb,OAAA,CAACJ,OAAO;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACXb,OAAA,CAACP,GAAG;UAACyB,OAAO,EAAC,WAAW;UAACE,IAAI,EAAEZ;QAAS;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEV,CAAC;AAACX,EAAA,CAvCID,eAAe;AAAAoB,EAAA,GAAfpB,eAAe;AAyCrB,eAAeA,eAAe;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
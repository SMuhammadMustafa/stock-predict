{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studies\\\\FYP\\\\Frontend\\\\fyp\\\\src\\\\components\\\\PredictedStockPrices.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, ResponsiveContainer } from 'recharts';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PredictedStockPrices = () => {\n  _s();\n  const [historicalData, setHistoricalData] = useState([]);\n  const [predictedData, setPredictedData] = useState([]);\n  useEffect(() => {\n    // Fetch historical price data for a specific ticker\n    const fetchHistoricalData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/stock-data/AATM'); // Example ticker\n        const historicalPrices = response.data.map(item => ({\n          timestamp: new Date(item.timestamp).toLocaleDateString('en-US'),\n          historicalPrice: item.close // Assuming `close` is the historical price\n        })).sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n        setHistoricalData(historicalPrices);\n      } catch (error) {\n        console.error('Error fetching historical data', error);\n      }\n    };\n\n    // Simulated demo data for predicted stock prices\n    const demoPredictedData = [{\n      timestamp: '09/18/2024',\n      predictedPrice: 71.15\n    }, {\n      timestamp: '09/19/2024',\n      predictedPrice: 73\n    }, {\n      timestamp: '09/20/2024',\n      predictedPrice: 75\n    }, {\n      timestamp: '09/21/2024',\n      predictedPrice: 82.15\n    }, {\n      timestamp: '09/22/2024',\n      predictedPrice: 78.65\n    }, {\n      timestamp: '09/23/2024',\n      predictedPrice: 82.12\n    }];\n    setPredictedData(demoPredictedData);\n    fetchHistoricalData(); // Fetch historical data on component mount\n  }, []);\n\n  // Combine historical and predicted data into one array for charting\n  const combinedData = historicalData.map(histItem => {\n    const predictedItem = predictedData.find(predItem => predItem.timestamp === histItem.timestamp);\n    return {\n      timestamp: histItem.timestamp,\n      historicalPrice: histItem.historicalPrice,\n      predictedPrice: predictedItem ? predictedItem.predictedPrice : null\n    };\n  }).concat(predictedData.filter(predItem => !historicalData.find(histItem => histItem.timestamp === predItem.timestamp)));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Historical and Predicted Stock Prices\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: combinedData,\n        margin: {\n          top: 20,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"timestamp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"historicalPrice\",\n          stroke: \"#8884d8\",\n          name: \"Historical Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"predictedPrice\",\n          stroke: \"#82ca9d\",\n          name: \"Predicted Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(PredictedStockPrices, \"zA9/aRG/z/JSQsgDBOYtB4xFk+I=\");\n_c = PredictedStockPrices;\nexport default PredictedStockPrices;\nvar _c;\n$RefreshReg$(_c, \"PredictedStockPrices\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","Tooltip","CartesianGrid","Legend","ResponsiveContainer","axios","jsxDEV","_jsxDEV","PredictedStockPrices","_s","historicalData","setHistoricalData","predictedData","setPredictedData","fetchHistoricalData","response","get","historicalPrices","data","map","item","timestamp","Date","toLocaleDateString","historicalPrice","close","sort","a","b","error","console","demoPredictedData","predictedPrice","combinedData","histItem","predictedItem","find","predItem","concat","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","name","_c","$RefreshReg$"],"sources":["D:/Studies/FYP/Frontend/fyp/src/components/PredictedStockPrices.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, ResponsiveContainer } from 'recharts';\r\nimport axios from 'axios';\r\n\r\nconst PredictedStockPrices = () => {\r\n  const [historicalData, setHistoricalData] = useState([]);\r\n  const [predictedData, setPredictedData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch historical price data for a specific ticker\r\n    const fetchHistoricalData = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/stock-data/AATM'); // Example ticker\r\n        const historicalPrices = response.data.map(item => ({\r\n          timestamp: new Date(item.timestamp).toLocaleDateString('en-US'),\r\n          historicalPrice: item.close, // Assuming `close` is the historical price\r\n        })).sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r\n\r\n        setHistoricalData(historicalPrices);\r\n      } catch (error) {\r\n        console.error('Error fetching historical data', error);\r\n      }\r\n    };\r\n\r\n    // Simulated demo data for predicted stock prices\r\n    const demoPredictedData = [\r\n      { timestamp: '09/18/2024', predictedPrice: 71.15 },\r\n      { timestamp: '09/19/2024', predictedPrice: 73 },\r\n      { timestamp: '09/20/2024', predictedPrice: 75 },\r\n      { timestamp: '09/21/2024', predictedPrice: 82.15 },\r\n      { timestamp: '09/22/2024', predictedPrice: 78.65 },\r\n      { timestamp: '09/23/2024', predictedPrice: 82.12 },\r\n    ];\r\n\r\n    setPredictedData(demoPredictedData);\r\n    fetchHistoricalData(); // Fetch historical data on component mount\r\n  }, []);\r\n\r\n  // Combine historical and predicted data into one array for charting\r\n  const combinedData = historicalData.map(histItem => {\r\n    const predictedItem = predictedData.find(predItem => predItem.timestamp === histItem.timestamp);\r\n    return {\r\n      timestamp: histItem.timestamp,\r\n      historicalPrice: histItem.historicalPrice,\r\n      predictedPrice: predictedItem ? predictedItem.predictedPrice : null,\r\n    };\r\n  }).concat(predictedData.filter(predItem => !historicalData.find(histItem => histItem.timestamp === predItem.timestamp)));\r\n\r\n  return (\r\n    <div>\r\n      <h2>Historical and Predicted Stock Prices</h2>\r\n\r\n      {/* Stock predictions chart */}\r\n      <ResponsiveContainer width=\"100%\" height={400}>\r\n        <LineChart data={combinedData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"timestamp\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line type=\"monotone\" dataKey=\"historicalPrice\" stroke=\"#8884d8\" name=\"Historical Price\" />\r\n          <Line type=\"monotone\" dataKey=\"predictedPrice\" stroke=\"#82ca9d\" name=\"Predicted Price\" />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PredictedStockPrices;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
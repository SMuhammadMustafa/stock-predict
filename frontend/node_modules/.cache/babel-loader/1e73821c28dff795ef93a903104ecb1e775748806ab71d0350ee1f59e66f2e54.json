{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studies\\\\FYP\\\\Frontend\\\\fyp\\\\src\\\\components\\\\StockChart.js\",\n  _s = $RefreshSig$();\n// src/components/StockChart.js\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { CircularProgress } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockChart = () => {\n  _s();\n  const [stockData, setStockData] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  // Fetch stock data from the local backend\n  useEffect(() => {\n    const fetchStockData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/stock-data');\n        const data = response.data;\n\n        // Extract timestamp and close price for charting\n        const dates = data.map(d => new Date(d.timestamp).toLocaleDateString());\n        const prices = data.map(d => d.close);\n\n        // Update chart data\n        setStockData({\n          labels: dates,\n          datasets: [{\n            label: 'Stock Price',\n            data: prices,\n            borderColor: 'rgba(75, 192, 192, 1)',\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderWidth: 1\n          }]\n        });\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching stock data\", error);\n      }\n    };\n    fetchStockData();\n  }, []);\n\n  // Display loading spinner or the chart\n  return loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Line, {\n    data: stockData,\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          display: true,\n          position: 'top'\n        }\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(StockChart, \"Zx4+Uix+GIfF6xjupjIB6AKljFk=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","axios","CircularProgress","jsxDEV","_jsxDEV","StockChart","_s","stockData","setStockData","loading","setLoading","fetchStockData","response","get","data","dates","map","d","Date","timestamp","toLocaleDateString","prices","close","labels","datasets","label","borderColor","backgroundColor","borderWidth","error","console","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","plugins","legend","display","position","_c","$RefreshReg$"],"sources":["D:/Studies/FYP/Frontend/fyp/src/components/StockChart.js"],"sourcesContent":["// src/components/StockChart.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport { CircularProgress } from '@mui/material';\r\n\r\nconst StockChart = () => {\r\n  const [stockData, setStockData] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Fetch stock data from the local backend\r\n  useEffect(() => {\r\n    const fetchStockData = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/stock-data');\r\n        const data = response.data;\r\n\r\n        // Extract timestamp and close price for charting\r\n        const dates = data.map(d => new Date(d.timestamp).toLocaleDateString());\r\n        const prices = data.map(d => d.close);\r\n\r\n        // Update chart data\r\n        setStockData({\r\n          labels: dates,\r\n          datasets: [\r\n            {\r\n              label: 'Stock Price',\r\n              data: prices,\r\n              borderColor: 'rgba(75, 192, 192, 1)',\r\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n              borderWidth: 1,\r\n            }\r\n          ]\r\n        });\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error fetching stock data\", error);\r\n      }\r\n    };\r\n\r\n    fetchStockData();\r\n  }, []);\r\n\r\n  // Display loading spinner or the chart\r\n  return loading ? (\r\n    <CircularProgress />\r\n  ) : (\r\n    <Line\r\n      data={stockData}\r\n      options={{\r\n        responsive: true,\r\n        plugins: {\r\n          legend: {\r\n            display: true,\r\n            position: 'top',\r\n          }\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StockChart;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAD,SAAS,CAAC,MAAM;IACd,MAAMa,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,sCAAsC,CAAC;QACxE,MAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAI;;QAE1B;QACA,MAAMC,KAAK,GAAGD,IAAI,CAACE,GAAG,CAACC,CAAC,IAAI,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAC;QACvE,MAAMC,MAAM,GAAGP,IAAI,CAACE,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACK,KAAK,CAAC;;QAErC;QACAd,YAAY,CAAC;UACXe,MAAM,EAAER,KAAK;UACbS,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,aAAa;YACpBX,IAAI,EAAEO,MAAM;YACZK,WAAW,EAAE,uBAAuB;YACpCC,eAAe,EAAE,yBAAyB;YAC1CC,WAAW,EAAE;UACf,CAAC;QAEL,CAAC,CAAC;QACFlB,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOmB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDlB,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,OAAOF,OAAO,gBACZL,OAAA,CAACF,gBAAgB;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAEpB9B,OAAA,CAACJ,IAAI;IACHc,IAAI,EAAEP,SAAU;IAChB4B,OAAO,EAAE;MACPC,UAAU,EAAE,IAAI;MAChBC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,OAAO,EAAE,IAAI;UACbC,QAAQ,EAAE;QACZ;MACF;IACF;EAAE;IAAAT,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CACF;AACH,CAAC;AAAC5B,EAAA,CAtDID,UAAU;AAAAoC,EAAA,GAAVpC,UAAU;AAwDhB,eAAeA,UAAU;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
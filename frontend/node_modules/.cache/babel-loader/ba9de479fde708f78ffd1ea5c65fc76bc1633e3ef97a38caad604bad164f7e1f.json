{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studies\\\\FYP\\\\Frontend\\\\fyp\\\\src\\\\components\\\\PredictedStockPrices.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PredictedStockPrices = () => {\n  _s();\n  const [predictedData, setPredictedData] = useState([]);\n  useEffect(() => {\n    // Simulated demo data for predicted stock prices\n    const demoData = [{\n      timestamp: '2024-10-01',\n      predictedPrice: 100\n    }, {\n      timestamp: '2024-10-02',\n      predictedPrice: 102\n    }, {\n      timestamp: '2024-10-03',\n      predictedPrice: 104\n    }, {\n      timestamp: '2024-10-04',\n      predictedPrice: 103\n    }, {\n      timestamp: '2024-10-05',\n      predictedPrice: 105\n    }, {\n      timestamp: '2024-10-06',\n      predictedPrice: 107\n    }, {\n      timestamp: '2024-10-07',\n      predictedPrice: 109\n    }, {\n      timestamp: '2024-10-08',\n      predictedPrice: 111\n    }];\n\n    // Simulating an API call with demo data\n    setPredictedData(demoData);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Predicted Stock Prices\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: predictedData,\n        margin: {\n          top: 20,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"timestamp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"predictedPrice\",\n          stroke: \"#82ca9d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(PredictedStockPrices, \"DfgDHBsu/GBeGPPNkjFTBjQGCmY=\");\n_c = PredictedStockPrices;\nexport default PredictedStockPrices;\nvar _c;\n$RefreshReg$(_c, \"PredictedStockPrices\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","Tooltip","CartesianGrid","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","PredictedStockPrices","_s","predictedData","setPredictedData","demoData","timestamp","predictedPrice","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","_c","$RefreshReg$"],"sources":["D:/Studies/FYP/Frontend/fyp/src/components/PredictedStockPrices.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, ResponsiveContainer } from 'recharts';\r\n\r\nconst PredictedStockPrices = () => {\r\n  const [predictedData, setPredictedData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Simulated demo data for predicted stock prices\r\n    const demoData = [\r\n      { timestamp: '2024-10-01', predictedPrice: 100 },\r\n      { timestamp: '2024-10-02', predictedPrice: 102 },\r\n      { timestamp: '2024-10-03', predictedPrice: 104 },\r\n      { timestamp: '2024-10-04', predictedPrice: 103 },\r\n      { timestamp: '2024-10-05', predictedPrice: 105 },\r\n      { timestamp: '2024-10-06', predictedPrice: 107 },\r\n      { timestamp: '2024-10-07', predictedPrice: 109 },\r\n      { timestamp: '2024-10-08', predictedPrice: 111 },\r\n    ];\r\n    \r\n    // Simulating an API call with demo data\r\n    setPredictedData(demoData);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Predicted Stock Prices</h2>\r\n\r\n      {/* Stock predictions chart */}\r\n      <ResponsiveContainer width=\"100%\" height={400}>\r\n        <LineChart data={predictedData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"timestamp\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line type=\"monotone\" dataKey=\"predictedPrice\" stroke=\"#82ca9d\" />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PredictedStockPrices;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studies\\\\FYP\\\\Frontend\\\\fyp\\\\src\\\\components\\\\StockIndicators.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, ResponsiveContainer } from 'recharts';\nimport CustomTooltip from \"./CustomTooltip\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockChart = () => {\n  _s();\n  const [stockData, setStockData] = useState([]);\n  const [selectedTicker, setSelectedTicker] = useState('AATM'); // Default ticker\n  const [selectedIndicator, setSelectedIndicator] = useState('SMA'); // Default indicator\n  const [windowSize, setWindowSize] = useState(14); // Default window size\n  const [tickers, setTickers] = useState([]);\n  const [indicators, setIndicators] = useState(['SMA', 'EMA', 'RSI']); // Available indicators\n\n  // Fetch stock indicator data from the backend\n  const fetchIndicatorData = (ticker, indicator, window) => {\n    axios.get(`http://localhost:5000/api/stock-indicators/${ticker}/${indicator}/${window}`).then(response => {\n      const formattedData = response.data.map(item => ({\n        timestamp: new Date(item.timestamp).toLocaleDateString('en-US'),\n        value: item[indicator] // Dynamically set the indicator value\n      })).sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n      setStockData(formattedData);\n    }).catch(error => {\n      console.error('Error fetching indicator data', error);\n    });\n  };\n  useEffect(() => {\n    // Fetch data for the default selected ticker, indicator, and window when the component mounts\n    fetchIndicatorData(selectedTicker, selectedIndicator, windowSize);\n  }, [selectedTicker, selectedIndicator, windowSize]);\n\n  // Fetch ticker names from the backend\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/tickers').then(response => {\n      setTickers(response.data);\n      if (response.data.length > 0) {\n        setSelectedTicker(response.data[0]); // Set default ticker to the first one\n      }\n    }).catch(error => {\n      console.error('Error fetching tickers', error);\n    });\n  }, []);\n\n  // Handle ticker dropdown change\n  const handleTickerChange = e => {\n    setSelectedTicker(e.target.value);\n  };\n\n  // Handle indicator dropdown change\n  const handleIndicatorChange = e => {\n    setSelectedIndicator(e.target.value);\n  };\n\n  // Handle window size input change\n  const handleWindowSizeChange = e => {\n    setWindowSize(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Stock Indicator for \", selectedTicker, \": \", selectedIndicator, \" (Window: \", windowSize, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"tickerSelect\",\n      children: \"Select Ticker: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"tickerSelect\",\n      value: selectedTicker,\n      onChange: handleTickerChange,\n      children: tickers.map(ticker => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: ticker,\n        children: ticker\n      }, ticker, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"indicatorSelect\",\n      style: {\n        marginLeft: '20px'\n      },\n      children: \"Select Indicator: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"indicatorSelect\",\n      value: selectedIndicator,\n      onChange: handleIndicatorChange,\n      children: indicators.map(indicator => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: indicator,\n        children: indicator\n      }, indicator, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"windowSizeInput\",\n      style: {\n        marginLeft: '20px'\n      },\n      children: \"Window Size: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"windowSizeInput\",\n      type: \"number\",\n      min: \"1\",\n      value: windowSize,\n      onChange: handleWindowSizeChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 500,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: stockData,\n        margin: {\n          top: 20,\n          right: 30,\n          left: 0,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"timestamp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this),\n          cursor: {\n            fill: \"transparent\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"value\",\n          stroke: \"#ffc333\",\n          strokeWidth: 3,\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(StockChart, \"pX1EHQ2j0QVLZWdcUi4awW30Bg8=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useEffect","useState","LineChart","Line","XAxis","YAxis","Tooltip","CartesianGrid","Legend","ResponsiveContainer","CustomTooltip","axios","jsxDEV","_jsxDEV","StockChart","_s","stockData","setStockData","selectedTicker","setSelectedTicker","selectedIndicator","setSelectedIndicator","windowSize","setWindowSize","tickers","setTickers","indicators","setIndicators","fetchIndicatorData","ticker","indicator","window","get","then","response","formattedData","data","map","item","timestamp","Date","toLocaleDateString","value","sort","a","b","catch","error","console","length","handleTickerChange","e","target","handleIndicatorChange","handleWindowSizeChange","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","style","marginLeft","type","min","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","content","cursor","fill","stroke","strokeWidth","activeDot","r","_c","$RefreshReg$"],"sources":["D:/Studies/FYP/Frontend/fyp/src/components/StockIndicators.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, ResponsiveContainer } from 'recharts';\r\nimport CustomTooltip from \"./CustomTooltip\";\r\nimport axios from 'axios';\r\n\r\n\r\nconst StockChart = () => {\r\n  const [stockData, setStockData] = useState([]);\r\n  const [selectedTicker, setSelectedTicker] = useState('AATM'); // Default ticker\r\n  const [selectedIndicator, setSelectedIndicator] = useState('SMA'); // Default indicator\r\n  const [windowSize, setWindowSize] = useState(14); // Default window size\r\n  const [tickers, setTickers] = useState([]);\r\n  const [indicators, setIndicators] = useState(['SMA', 'EMA', 'RSI']); // Available indicators\r\n\r\n  // Fetch stock indicator data from the backend\r\n  const fetchIndicatorData = (ticker, indicator, window) => {\r\n    axios.get(`http://localhost:5000/api/stock-indicators/${ticker}/${indicator}/${window}`)\r\n      .then(response => {\r\n        const formattedData = response.data.map(item => ({\r\n          timestamp: new Date(item.timestamp).toLocaleDateString('en-US'),\r\n          value: item[indicator], // Dynamically set the indicator value\r\n        })).sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r\n        setStockData(formattedData);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching indicator data', error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch data for the default selected ticker, indicator, and window when the component mounts\r\n    fetchIndicatorData(selectedTicker, selectedIndicator, windowSize);\r\n  }, [selectedTicker, selectedIndicator, windowSize]);\r\n\r\n  // Fetch ticker names from the backend\r\n  useEffect(() => {\r\n    axios.get('http://localhost:5000/api/tickers')\r\n      .then(response => {\r\n        setTickers(response.data);\r\n        if (response.data.length > 0) {\r\n          setSelectedTicker(response.data[0]); // Set default ticker to the first one\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching tickers', error);\r\n      });\r\n  }, []);\r\n\r\n  // Handle ticker dropdown change\r\n  const handleTickerChange = (e) => {\r\n    setSelectedTicker(e.target.value);\r\n  };\r\n\r\n  // Handle indicator dropdown change\r\n  const handleIndicatorChange = (e) => {\r\n    setSelectedIndicator(e.target.value);\r\n  };\r\n\r\n  // Handle window size input change\r\n  const handleWindowSizeChange = (e) => {\r\n    setWindowSize(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Stock Indicator for {selectedTicker}: {selectedIndicator} (Window: {windowSize})</h2>\r\n      \r\n      {/* Dropdown to select ticker */}\r\n      <label htmlFor=\"tickerSelect\">Select Ticker: </label>\r\n      <select id=\"tickerSelect\" value={selectedTicker} onChange={handleTickerChange}>\r\n        {tickers.map(ticker => (\r\n          <option key={ticker} value={ticker}>\r\n            {ticker}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      {/* Dropdown to select indicator */}\r\n      <label htmlFor=\"indicatorSelect\" style={{ marginLeft: '20px' }}>Select Indicator: </label>\r\n      <select id=\"indicatorSelect\" value={selectedIndicator} onChange={handleIndicatorChange}>\r\n        {indicators.map(indicator => (\r\n          <option key={indicator} value={indicator}>\r\n            {indicator}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      {/* Input to select custom window size */}\r\n      <label htmlFor=\"windowSizeInput\" style={{ marginLeft: '20px' }}>Window Size: </label>\r\n      <input \r\n        id=\"windowSizeInput\" \r\n        type=\"number\" \r\n        min=\"1\" \r\n        value={windowSize} \r\n        onChange={handleWindowSizeChange}\r\n      />\r\n\r\n      {/* Stock chart */}\r\n      <ResponsiveContainer width=\"100%\" height={500}>\r\n        <LineChart data={stockData} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"timestamp\" />\r\n          <YAxis />\r\n          <Tooltip content={<CustomTooltip />} cursor={{ fill: \"transparent\" }} />\r\n\r\n          <Legend />\r\n          <Line type=\"monotone\" dataKey=\"value\" stroke=\"#ffc333\" strokeWidth={3} activeDot={{ r: 8 }}/>\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
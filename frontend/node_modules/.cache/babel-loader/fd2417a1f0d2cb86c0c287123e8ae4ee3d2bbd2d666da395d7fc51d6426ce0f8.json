{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studies\\\\FYP\\\\Frontend\\\\fyp\\\\src\\\\components\\\\PredictedStockPrices.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, ResponsiveContainer } from 'recharts';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PredictedStockPrices = () => {\n  _s();\n  const [historicalData, setHistoricalData] = useState([]);\n  const [predictedData, setPredictedData] = useState([]);\n  const [selectedTicker, setSelectedTicker] = useState('AATM'); // Default ticker\n  const [tickers, setTickers] = useState([/*'AAL', 'AASM', */'AATM' /*, 'ABL', 'ABOT', 'ABSON'*/]); // Example tickers\n\n  useEffect(() => {\n    // Fetch historical price data for a specific ticker\n    const fetchHistoricalData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/stock-data/AATM'); // Example ticker\n        const historicalPrices = response.data.map(item => ({\n          timestamp: new Date(item.timestamp).toLocaleDateString('en-US'),\n          historicalPrice: item.close // Assuming `close` is the historical price\n        })).sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n        setHistoricalData(historicalPrices);\n      } catch (error) {\n        console.error('Error fetching historical data', error);\n      }\n    };\n\n    // Simulated demo data for predicted stock prices\n    const demoPredictedData = [{\n      timestamp: '9/18/2024',\n      predictedPrice: 71.15\n    }, {\n      timestamp: '9/19/2024',\n      predictedPrice: 73\n    }, {\n      timestamp: '9/20/2024',\n      predictedPrice: 75\n    }, {\n      timestamp: '9/21/2024',\n      predictedPrice: 82.15\n    }, {\n      timestamp: '9/22/2024',\n      predictedPrice: 78.65\n    }, {\n      timestamp: '9/23/2024',\n      predictedPrice: 82.12\n    }];\n    setPredictedData(demoPredictedData);\n    fetchHistoricalData(); // Fetch historical data on component mount\n  }, []);\n\n  // Combine historical and predicted data into one array for charting\n  const combinedData = historicalData.map(histItem => {\n    const predictedItem = predictedData.find(predItem => predItem.timestamp === histItem.timestamp);\n    return {\n      timestamp: histItem.timestamp,\n      historicalPrice: histItem.historicalPrice,\n      predictedPrice: predictedItem ? predictedItem.predictedPrice : null\n    };\n  }).concat(predictedData.filter(predItem => !historicalData.find(histItem => histItem.timestamp === predItem.timestamp)));\n  useEffect(() => {\n    // Fetch data for the default selected ticker when the component mounts\n    fetchStockData(selectedTicker);\n  }, [selectedTicker]);\n\n  // Handle dropdown change\n  const handleTickerChange = e => {\n    setSelectedTicker(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Predicted Stock Prices for \", selectedTicker]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"tickerSelect\",\n      children: \"Select Ticker: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"tickerSelect\",\n      value: selectedTicker,\n      onChange: handleTickerChange,\n      children: tickers.map(ticker => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: ticker,\n        children: ticker\n      }, ticker, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: combinedData,\n        margin: {\n          top: 20,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"timestamp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"historicalPrice\",\n          stroke: \"#8884d8\",\n          name: \"Historical Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"predictedPrice\",\n          stroke: \"#82ca9d\",\n          name: \"Predicted Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(PredictedStockPrices, \"rGcZVIy5BlqCCV/YC7ggAAIXU04=\");\n_c = PredictedStockPrices;\nexport default PredictedStockPrices;\nvar _c;\n$RefreshReg$(_c, \"PredictedStockPrices\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","Tooltip","CartesianGrid","Legend","ResponsiveContainer","axios","jsxDEV","_jsxDEV","PredictedStockPrices","_s","historicalData","setHistoricalData","predictedData","setPredictedData","selectedTicker","setSelectedTicker","tickers","setTickers","fetchHistoricalData","response","get","historicalPrices","data","map","item","timestamp","Date","toLocaleDateString","historicalPrice","close","sort","a","b","error","console","demoPredictedData","predictedPrice","combinedData","histItem","predictedItem","find","predItem","concat","filter","fetchStockData","handleTickerChange","e","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","ticker","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","name","_c","$RefreshReg$"],"sources":["D:/Studies/FYP/Frontend/fyp/src/components/PredictedStockPrices.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, ResponsiveContainer } from 'recharts';\r\nimport axios from 'axios';\r\n\r\nconst PredictedStockPrices = () => {\r\n  const [historicalData, setHistoricalData] = useState([]);\r\n  const [predictedData, setPredictedData] = useState([]);\r\n  const [selectedTicker, setSelectedTicker] = useState('AATM'); // Default ticker\r\n  const [tickers, setTickers] = useState([/*'AAL', 'AASM', */'AATM'/*, 'ABL', 'ABOT', 'ABSON'*/]); // Example tickers\r\n\r\n  useEffect(() => {\r\n    // Fetch historical price data for a specific ticker\r\n    const fetchHistoricalData = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/stock-data/AATM'); // Example ticker\r\n        const historicalPrices = response.data.map(item => ({\r\n          timestamp: new Date(item.timestamp).toLocaleDateString('en-US'),\r\n          historicalPrice: item.close, // Assuming `close` is the historical price\r\n        })).sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r\n\r\n        setHistoricalData(historicalPrices);\r\n      } catch (error) {\r\n        console.error('Error fetching historical data', error);\r\n      }\r\n    };\r\n\r\n    // Simulated demo data for predicted stock prices\r\n    const demoPredictedData = [\r\n      { timestamp: '9/18/2024', predictedPrice: 71.15 },\r\n      { timestamp: '9/19/2024', predictedPrice: 73 },\r\n      { timestamp: '9/20/2024', predictedPrice: 75 },\r\n      { timestamp: '9/21/2024', predictedPrice: 82.15 },\r\n      { timestamp: '9/22/2024', predictedPrice: 78.65 },\r\n      { timestamp: '9/23/2024', predictedPrice: 82.12 },\r\n    ];\r\n\r\n    setPredictedData(demoPredictedData);\r\n    fetchHistoricalData(); // Fetch historical data on component mount\r\n  }, []);\r\n\r\n  // Combine historical and predicted data into one array for charting\r\n  const combinedData = historicalData.map(histItem => {\r\n    const predictedItem = predictedData.find(predItem => predItem.timestamp === histItem.timestamp);\r\n    return {\r\n      timestamp: histItem.timestamp,\r\n      historicalPrice: histItem.historicalPrice,\r\n      predictedPrice: predictedItem ? predictedItem.predictedPrice : null,\r\n    };\r\n  }).concat(predictedData.filter(predItem => !historicalData.find(histItem => histItem.timestamp === predItem.timestamp)));\r\n\r\n  useEffect(() => {\r\n    // Fetch data for the default selected ticker when the component mounts\r\n    fetchStockData(selectedTicker);\r\n  }, [selectedTicker]);\r\n\r\n  // Handle dropdown change\r\n  const handleTickerChange = (e) => {\r\n    setSelectedTicker(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Predicted Stock Prices for {selectedTicker}</h2>\r\n\r\n      {/* Dropdown to select ticker */}\r\n      <label htmlFor=\"tickerSelect\">Select Ticker: </label>\r\n      <select id=\"tickerSelect\" value={selectedTicker} onChange={handleTickerChange}>\r\n        {tickers.map(ticker => (\r\n          <option key={ticker} value={ticker}>\r\n            {ticker}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      {/* Stock predictions chart */}\r\n      <ResponsiveContainer width=\"100%\" height={400}>\r\n        <LineChart data={combinedData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"timestamp\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line type=\"monotone\" dataKey=\"historicalPrice\" stroke=\"#8884d8\" name=\"Historical Price\" />\r\n          <Line type=\"monotone\" dataKey=\"predictedPrice\" stroke=\"#82ca9d\" name=\"Predicted Price\" />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PredictedStockPrices;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}